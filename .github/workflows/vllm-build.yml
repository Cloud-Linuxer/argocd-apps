name: vLLM Build and Push

on:
  push:
    branches: [ main ]
    paths: ['vllm/**']

concurrency:
  group: vllm-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: [self-hosted, linux, x64]   # ARC 러너 라벨에 맞춰 실행
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute image name (lowercase)
        id: prep
        shell: bash
        run: echo "image=ghcr.io/${GITHUB_REPOSITORY,,}/vllm" >> "$GITHUB_OUTPUT"

      - name: Get version
        id: version
        shell: bash
        run: |
          VERSION=$(cat vllm/VERSION)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # BuildKit 버전 고정 + GC 상한 (형식: equals)
      - name: Set up Docker Buildx (with GC limits)
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.13.2
          buildkitd-flags: |
            --oci-worker
            --oci-worker-gc=true
            --oci-worker-gc-keepstorage=20480
            --debug=false

      # 셀프호스트 시작 전/후 디스크 청소 (안전장치)
      - name: Pre-clean (self-hosted)
        run: |
          docker buildx prune -af || true
          docker system prune -af --volumes || true

      - name: Build and push (registry cache)
        uses: docker/build-push-action@v5
        with:
          context: ./vllm
          platforms: linux/amd64
          push: true                       # 절대 --load 금지
          tags: |
            ${{ steps.prep.outputs.image }}:${{ steps.version.outputs.version }}-amd64
            ${{ steps.prep.outputs.image }}:latest
          cache-from: type=registry,ref=${{ steps.prep.outputs.image }}:cache
          cache-to: type=registry,ref=${{ steps.prep.outputs.image }}:cache,mode=max
          provenance: false
          sbom: false
          build-args: |
            PIP_NO_CACHE_DIR=1
            UV_HTTP_TIMEOUT=600

      - name: Update manifest
        shell: bash
        run: |
          sed -i "s|image: ghcr.io/.*/vllm:.*|image: ${{ steps.prep.outputs.image }}:${{ steps.version.outputs.version }}-amd64|g" manifests/vllm-20b/deployment.yaml
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add manifests/vllm-20b/deployment.yaml
          git commit -m "Update vllm image to ${{ steps.version.outputs.version }}" || exit 0
          git push

      # 실패 시 buildkit 컨테이너 원인 즉시 확인
      - name: Debug buildx/buildkit (on failure)
        if: failure()
        run: |
          docker buildx ls || true
          docker ps -a --filter name=buildx_buildkit || true
          CID=$(docker ps -a --filter name=buildx_buildkit --format '{{.ID}}' | head -1) || true
          if [ -n "$CID" ]; then
            docker inspect "$CID" --format 'OOM={{.State.OOMKilled}} Exit={{.State.ExitCode}} Err={{.State.Error}}' || true
            docker logs --tail=200 "$CID" || true
          fi
